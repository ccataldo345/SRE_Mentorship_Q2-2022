### Jenkins notes

- Continuous Integration tool that allows to create pipelines 
- run Unit Tests, Integration Tests 
- do code quality checks
- do package applications and deploy 

# Launch Jenkins with Docker 1st time:
docker-compose --version
https://hub.docker.com/r/jenkins/jenkins
docker pull jenkins/jenkins:lts-jdk11
in the folder with docker-compose.yml file:
	docker-compose -f <filename> up -d
	(-d means that runs in the background, does not receive input or display output)
??? sudo chown -R $USER:$USER /var/jenkins_home
du -sh /var/jenkins_home
http://localhost:8081
paste the password
Install suggested plugins
u: admin
P: admin
- Delete the container (will persists if folder is set and yml file recalled):
docker-compose down

# Launch Jenkins again:
docker container ls -a (show all containers, including not running)
docker start ID
docker container ls (check if it is running)
http://localhost:8081
http://localhost:8081/login?from=%2F
docker stop ID

# Configure Jenkins:
Manage Jenkins > Global Tool Configuration > Maven + Docker
(Select "install automatically" and give name (MyMaven and MyDocker)
	??? Do not find Docker ???
	Manage Jenkins > Manage Plugins > Availables > Docker Pipeline (select) > Install witout restart
	Manage Jenkins > Global Tool Configuration > Docker

# Create a new job:
Jenkins > New job > pipeline
Build Triggers > Poll SCM: "* * * * *"
Pipeline > Pieline script from SCM > https://github.com/ccataldo345/jenkin-devops-microservice
	   Branch Specifier (blank for 'any') > */main
Save
Build now
Build History > Click on date > Console output

///ERROR: stderr: fatal: couldn't find remote ref refs/heads/master
> git main vs master branch
> change: Branch Specifier (blank for 'any') > */main

# Jenkinsfile:
- Groovy script
- Scripted:
node {
	echo 'Build'
	echo 'Test'
	echo 'Integration Test'
}

- Declarative:
pipeline {
	agent any
	stages {
		stage('Build') {
			steps {
				echo 'Build'
			}
		}
		stage('Test') {
			steps {
				echo 'Test'
			}
		}
		stage('Integration Test') {
			steps {
				echo 'Integration Test'
			}
		}
	}
}	
		
- Post: always, success, failure, unstated, changed

/// ERROR: permission denied
	https://www.udemy.com/course/devops-with-docker-kubernetes-and-azure-devops/learn/lecture/18050129#questions/10725398 
	I had the same error(docker :Permission denied) , so I noticed that   the last line in docker-compose.yml  gave  an error when executing in my host machine:
	michael@ ~$/usr/local/bin/docker --version
	bash: /usr/local/bin/docker: Is a directory
	But this worked:
	michael@ ~$/usr/bin/docker --version
	Docker version 19.03.8, build afacb8b7f0
	so I modified the last line in docker-compose.yml with this:
	- /usr/bin/docker:/usr/local/bin/docker
	After that everything works like a charm! Hope it helps!!
	PS: My host OS is Linux Mint 18.3.

# Pipeline Syntax > Snippet Generator: creates Pipeline script code 
	- http://localhost:8081/job/jenkin-devops-microservice/pipeline-syntax/
	- ex: user input, repeat block, timeout, etc
	
# Pipeline Syntax > Global Variable Reference: variables that can be used in pipelines
	- http://localhost:8081/job/jenkin-devops-microservice/pipeline-syntax/globals
	
# Add Maven and Docker to Pipeline script:
	environment {
		mavenHome = tool 'myMaven'
		dockerHome = tool 'myDocker'
		PATH = "$mavenHome/bin:$dockerHome/bin:$PATH"
	}

# Maven Compile, Test, Integration Test and Package (jar file):
	stage("Compile") {
			steps {
				sh "mvn clean compile"
			}
		}
		stage("Test") {
			steps {
				sh "mvn test"
			}
		}
		stage("Integration Test") {
			steps {
				sh "mvn failsafe:integration-test failsafe:verify"
			}
		}
		stage("Package") {
			steps {
				// create jar file
				echo "mvn package -DskipTests"
				sh "mvn package -DskipTests"
			}
		}

# Set Docker Hub credentials in Jenkins:
	- Jenkins > Manage Jenkins > Manage Credentials
	- Stores scoped to Jenkins > Jenkins > Global credentials
	- Add Credentials
	- http://localhost:8081/credentials/store/system/domain/_/newCredentials
	- Scope: Global (Jenkins, nodes, items, all child items, etc)
	- Username: chris345000 (<Docker Hub username>)
	- Password: <Docker Hub password>
	- ID: dockerhub
	- Description: dockerhub
	
# Create and Push docker container in Docker Hub:
	stage("Build Docker Image") {
		steps {
			// sh "docker build -t chris345000/currency-exchange-devops:$env.BUILD_TAG"
			script {
				dockerImage = docker.build("chris345000/currency-exchange-devops:${env.BUILD_TAG}")
			}
		}
	}
	stage("Push Docker Image") {
		steps {
			script {
				docker.withRegistry("", "dockerhub") {
					dockerImage.push();
					dockerImage.push('latest');
				}
			}
		}
	}

# Jenkins CLI:
- https://www.youtube.com/watch?v=bTFMvXIkNIg
- Manage Jenkins > Jenkins CLI > copy link address "jenkins-cli.jar" (http://localhost:8081/jnlpJars/jenkins-cli.jar)
wget http://localhost:8081/jnlpJars/jenkins-cli.jar
cp jenkins-cli.jar /var/jenkins_home/
java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8081/ who-am-i (>>> should report: "Authenticated as: anonymous")

- generate token in Jenkins UI:
http://localhost:8081/user/admin/configure
> Add new token (admin-token) > Generate > copy
echo "admin:<token>" > jenkins_admin-token
cp jenkins_admin-token /var/jenkins_home/

- Install plugins (*must restart Jenkins after installed):
Find plugins here: https://plugins.jenkins.io/
	> click on "How to install" and copy the ,plugin-name:version> 
java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8081/ -auth @jenkins_admin-token install-plugin docker-workflow:1.28
java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8081/ -auth @jenkins_admin-token install-plugin maven-plugin:3.19
	> should receive report: "Installing docker-workflow:1.28 from update center"

- Restart Jenkins:
java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8081/ -auth @jenkins_admin-token safe-restart
docker container ls (should be empty, no jenkins container is running)
docker container start jenkins

- list installed plugins:
java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8081/ -auth @jenkins_admin-token list-plugins

- list all CLI commands:
java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8081/ -auth @jenkins_admin-token help

# Configuration as code plugin:
- https://plugins.jenkins.io/configuration-as-code/
- install plugin in Jenkins:
	java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8081/ -auth @jenkins_admin-token install-plugin c onfiguration-as-code:1429.v09b_044a_c93de safe-restart
- docker container ls (should be empty, no jenkins container is running)
- docker container start jenkins
- go to: Manage Jenkins > Configuration as code > Download configuration (jenkins.yaml)
- touch /var/jenkins_home/jenkins-config.yaml (nano + paste downloaded file text jenkins.yaml)
- Replace configuration source with: Path or URL: 
	/var/jenkins_home/jenkins-config.yaml
- Apply new configuration
/// ERROR:
	if the config file is not working or missing:
	- cp io.jenkins.plugins.casc.CasCGlobalConfig.xml io.jenkins.plugins.casc.CasCGlobalConfig.xml.BKP
	- rm io.jenkins.plugins.casc.CasCGlobalConfig.xml
	- docker container restart jenkins
