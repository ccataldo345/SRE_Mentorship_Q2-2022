### Terraform notes

# Infrastructure as code:
- Create template > Provision server > Install software > Configure software > Deploy app
- Provision server > Terraform + AWS
- Install and Configure software = Configuration management tools > Ansible, Chef, Puppet
- Deploy applications on servers > Jenkins, Azure Devops

# Terraform
- install: https://learn.hashicorp.com/tutorials/terraform/install-cli
- terraform version
- mkdir ~/terraform/01-terraform-basics
- touch main.tf

# specific a Provider, region and version:
	- https://registry.terraform.io/providers/hashicorp/aws/latest/docs
	- with Terraform in man.tf:
		terraform {
		  required_providers {
			aws = {
			  source  = "hashicorp/aws"
			  version = "~> 3.0"
			}
		  }
		}
		provider "aws" {
		  region = "eu-central-1"
		}
	- $ terraform init

# login to AWS - IAM - chris01 (use 1Password)
- Autentication > Environmet variables approach:
	$ export AWS_ACCESS_KEY_ID=<AWS-access-key-ID>
	$ export AWS_SECRET_ACCESS_KEY=<AWS-secret-access-key>
	$ aws iam list-users   #check AWS users

- Create Access keys (user account (no root account!)
	Users > select user > Security Credentials > Create Access Key
	CLI:	
		aws configure > Key Id + Secret Key + "eu-central-1" + default
		aws iam list-users   #check AWS users
		
# list of commands:
https://github.com/in28minutes/devops-master-class/tree/master/terraform#commands-executed 

# create an S3 bucket in AWS (store and retrieve data, high durability and availabilty):
	- In AWS: Services > S3 > Create a Bucket
	- with Terraform in man.tf:
		resource "aws_s3_bucket" "my_s3_bucket" {
			bucket = "my-s3-bucket-chris345-001"
			versioning {
				enabled = true
			}
		} 
	- $ terraform plan	 # check only what happens if run main.tf
	- $ terraform apply	  # execute main.tf, accept with 'yes'
	- see new created bucket in AWS > S3 > Buckets
	- versioning = store multiple versions of the same file over a period of time

# States:
- Desired: main.ts
- Known: terrafor.tfstate
- Actuial: AWS online
- $ terraform apply > makes the Desired state Actual
- https://www.terraform.io/language/state 
- https://www.terraform.io/language/state/purpose

# projects in28minutes repo:
- https://github.com/in28minutes/devops-master-class/tree/master/terraform/backup

# Terraform console:
- $ terraform console
- > aws_s3_bucket.my_s3_bucket
- > aws_s3_bucket.my_s3_bucket.versioning
- > aws_s3_bucket.my_s3_bucket.versioning[0]
- in man.tf:
	output "my_s3_bucket_versioning" {
		value = aws_s3_bucket.my_s3_bucket.versioning[0].enabled
	}
	output "my_s3_bucket_complete_details" {
		value = aws_s3_bucket.my_s3_bucket
	}
- $ terraform apply -refresh="false"
	> should return "my_s3_bucket_versioning = true" and details
	
# creat an Iam user:
- must use root user credentials (find in access key ID and secret access key):
	export AWS_ACCESS_KEY_ID=
	export AWS_SECRET_ACCESS_KEY=
- in man.tf:
	resource "aws_iam_user" "my_iam_user" {
		name = "my_iam_user_abc"
	}
	output "my_iam_user_details" {
		value = aws_iam_user.my_iam_user
	}
- $ terraform plan -out iam.tfplan
- $ terraform apply "iam.tfplan"
- $ terraform apply -refresh="false"
- $ terraform console
	> aws_iam_user.my_iam_user
	> aws_iam_user.my_iam_user.arn

# update a user:
- in man.tf:
	resource "aws_iam_user" "my_iam_user" {
		name = "my_iam_user_abc_updated"
	}
- $  terraform apply -target="aws_iam_user.my_iam_user"

# Terraform to Git:
- never upload to Git the files:
	*.tfstate
	*.tfstate.backup
	.terraform/

# Separate resources and outuputs into different files .tf:
- $ terraform apply -refresh="false"

# Desctry the created resources:
- $ terraform destroy

# Create multiple users:
- ~/terraform/02-more-terraform-basics/main.tf:
	terraform {
		required_providers {
			aws = {
				source  = "hashicorp/aws"
				version = "~> 3.0"
			}
		}
	}
	provider "aws" {
		region = "eu-central-1"
	}
	resource "aws_iam_user" "my_iam_users" {
		count = 2
		name = "my_iam_user_${count.index}"
	}
- $ terraform init
- $ terraform apply

# Console commands:
- $ terrform console
	> aws_iam_user.my_iam_users
	> aws_iam_user.my_iam_users[0].arn
	> aws_iam_user.my_iam_users[0].name
	> aws_iam_user.my_iam_users[0].path
	> terraform validate   #check terraform syntax
	> terraform fmt   # format indentation
	> terraform show   #show info on the current state
	
# Documentation:
- https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_user
- https://www.terraform.io/cli/commands/apply

# Variables:
- in main.tf:
	variable "iam_user_name_prefix" {
	  default = "my_iam_user"
	}
	resource "aws_iam_user" "my_iam_users" {
	  count = 3
	  name  = "${var.iam_user_name_prefix}_${count.index}"
	}
- in console:
	> var.iam_user_name_prefix
- export variable:
	$ EXPORT TF_VAR?_iam_user_name_prefix=FROM_ENV_VARIABLE_IAM_PREFIX
	- create a terraform.tfvars file:
		iam_user_name_prefix="VALUE_FROM_TERRAFORM_TFVARS"
		$ terraform plan -refresh="false"
		$ terraform plan -refresh="false" -var "iam_user_name_prefix="VALUE_FROM_COMMAND_LINE"   
		  #command line vars have priority on other variables (export, env) 

# List and Sets:
- Collection functions: https://www.terraform.io/language/functions/list 
- List in main.tf (use index number):
	variable "names" {
	  default = ["chris", "tom", "jane"]
	}
	resource "aws_iam_user" "my_iam_users" {
	  count = length(var.names)
	  name  = var.names[count.index]
	}
- Set in main.tf (use index name):
	variable "names" {
	  default = ["mark", "chris", "tom", "jane"]
	}
	resource "aws_iam_user" "my_iam_users" {
	  for_each = toset(var.names)
	  name = each.value
	}

# Maps (map of strings and map of map):
- in main.tf:
	variable "users" {
	  default = {
		# lisa: "UK",
		# mark: "USA",
		# chris: "EU"
		llisa : { country : "UK", department : "ABC" },
		mark : { country : "USA", department : "CDE" },
		chris : { country : "EU", department : "XYZ" }
	  }
	}
	resource "aws_iam_user" "my_iam_users" {
	  for_each = var.users
	  name     = each.key
	  tags = {
		# country : each.value
		country : each.value.country
		epartment : each.value.department
	  }
	}
- terraform console:
	> var.users
	> var.users.lisa
	> keys(var.users)
	> values(var.users)
	> lookup(var.users,"lisa")
